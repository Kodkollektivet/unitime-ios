//
//  BranchO.swift
//  TimeEditLnu
//
//  Created by AlperGundogdu on 2/7/17.
//  Copyright Â© 2017 Kodkollektivet. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class BranchO : NSObject {

    //// Drawing Methods

    public dynamic class func drawBranchOnly(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 107), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 107), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 107)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 34, y: 71))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 38), controlPoint1: CGPoint(x: 33.88, y: 69.11), controlPoint2: CGPoint(x: 33.35, y: 52.11))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 19), controlPoint1: CGPoint(x: 31.04, y: 27.98), controlPoint2: CGPoint(x: 28.13, y: 19.33))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 26.94, y: 16.27), controlPoint2: CGPoint(x: 22.91, y: 8.07))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 0.5), controlPoint1: CGPoint(x: 7.87, y: -0.78), controlPoint2: CGPoint(x: -2.99, y: -1.16))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 4), controlPoint1: CGPoint(x: 0.95, y: 0.71), controlPoint2: CGPoint(x: 4.67, y: 1.65))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 11.31, y: 5.25), controlPoint2: CGPoint(x: 14.06, y: 7.23))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 21.74, y: 14.25), controlPoint2: CGPoint(x: 23.8, y: 21.53))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 38), controlPoint1: CGPoint(x: 24.18, y: 22.44), controlPoint2: CGPoint(x: 25.75, y: 30.26))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 55), controlPoint1: CGPoint(x: 26.24, y: 45.68), controlPoint2: CGPoint(x: 25.17, y: 53.27))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 107), controlPoint1: CGPoint(x: 22.51, y: 81.16), controlPoint2: CGPoint(x: 13, y: 107))
        bezierPath.addLine(to: CGPoint(x: 36, y: 107))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 71), controlPoint1: CGPoint(x: 36, y: 107), controlPoint2: CGPoint(x: 35.29, y: 90.61))
        bezierPath.close()
        //color2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
