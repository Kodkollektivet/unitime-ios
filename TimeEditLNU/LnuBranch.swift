//
//  LnuBranch.swift
//  lnuTimeEdit
//
//  Created by AlperGundogdu on 2/6/17.
//  Copyright Â© 2017 Kodkollektivet. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LnuBranch : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1000, height: 1324), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1000, height: 1324), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1000, y: resizedFrame.height / 1324)
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 157, y: 236, width: 11, height: 11))
        UIColor.lightGray.setFill()
        oval2Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 189, y: 229, width: 19, height: 19))
        UIColor.gray.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 172, y: 240, width: 19, height: 19))
        UIColor.gray.setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 203, y: 244, width: 19, height: 19))
        UIColor.gray.setFill()
        oval6Path.fill()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 185, y: 258, width: 19, height: 19))
        UIColor.gray.setFill()
        oval7Path.fill()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 206, y: 267, width: 19, height: 19))
        UIColor.gray.setFill()
        oval8Path.fill()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 151, y: 259, width: 19, height: 19))
        UIColor.gray.setFill()
        oval9Path.fill()


        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 188, y: 280, width: 19, height: 19))
        UIColor.gray.setFill()
        oval10Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 208, y: 292, width: 19, height: 19))
        UIColor.gray.setFill()
        oval11Path.fill()


        //// Oval 12 Drawing
        let oval12Path = UIBezierPath(ovalIn: CGRect(x: 189, y: 304, width: 19, height: 19))
        UIColor.gray.setFill()
        oval12Path.fill()


        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 154, y: 302, width: 19, height: 19))
        UIColor.gray.setFill()
        oval13Path.fill()


        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 158, y: 281, width: 19, height: 19))
        UIColor.gray.setFill()
        oval14Path.fill()


        //// Oval 15 Drawing
        let oval15Path = UIBezierPath(ovalIn: CGRect(x: 137, y: 285, width: 19, height: 19))
        UIColor.gray.setFill()
        oval15Path.fill()


        //// Oval 16 Drawing
        let oval16Path = UIBezierPath(ovalIn: CGRect(x: 140, y: 271, width: 12, height: 12))
        UIColor.lightGray.setFill()
        oval16Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 176, y: 226, width: 11, height: 11))
        UIColor.lightGray.setFill()
        oval3Path.fill()


        //// Oval 17 Drawing
        let oval17Path = UIBezierPath(ovalIn: CGRect(x: 224, y: 283, width: 11, height: 11))
        UIColor.lightGray.setFill()
        oval17Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 135, y: 241, width: 19, height: 19))
        UIColor.gray.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.4)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 186, y: 322))
        bezierPath.addCurve(to: CGPoint(x: 185, y: 289), controlPoint1: CGPoint(x: 185.88, y: 320.11), controlPoint2: CGPoint(x: 186.35, y: 303.11))
        bezierPath.addCurve(to: CGPoint(x: 181, y: 270), controlPoint1: CGPoint(x: 184.04, y: 278.98), controlPoint2: CGPoint(x: 181.13, y: 270.33))
        bezierPath.addCurve(to: CGPoint(x: 174, y: 259), controlPoint1: CGPoint(x: 178.7, y: 264.06), controlPoint2: CGPoint(x: 177.67, y: 262.44))
        bezierPath.addCurve(to: CGPoint(x: 153.5, y: 251.5), controlPoint1: CGPoint(x: 162.6, y: 248.31), controlPoint2: CGPoint(x: 147.04, y: 248.44))
        bezierPath.addCurve(to: CGPoint(x: 162, y: 255), controlPoint1: CGPoint(x: 153.95, y: 251.71), controlPoint2: CGPoint(x: 157.67, y: 252.65))
        bezierPath.addCurve(to: CGPoint(x: 169, y: 260), controlPoint1: CGPoint(x: 164.31, y: 256.25), controlPoint2: CGPoint(x: 167.06, y: 258.23))
        bezierPath.addCurve(to: CGPoint(x: 177, y: 273), controlPoint1: CGPoint(x: 174.74, y: 265.25), controlPoint2: CGPoint(x: 176.8, y: 272.53))
        bezierPath.addCurve(to: CGPoint(x: 179, y: 289), controlPoint1: CGPoint(x: 177.18, y: 273.44), controlPoint2: CGPoint(x: 178.75, y: 281.26))
        bezierPath.addCurve(to: CGPoint(x: 178, y: 306), controlPoint1: CGPoint(x: 179.24, y: 296.68), controlPoint2: CGPoint(x: 178.17, y: 304.27))
        bezierPath.addCurve(to: CGPoint(x: 166, y: 358), controlPoint1: CGPoint(x: 175.51, y: 332.16), controlPoint2: CGPoint(x: 166, y: 358))
        bezierPath.addLine(to: CGPoint(x: 189, y: 358))
        bezierPath.addCurve(to: CGPoint(x: 186, y: 322), controlPoint1: CGPoint(x: 189, y: 358), controlPoint2: CGPoint(x: 187.29, y: 341.61))
        bezierPath.close()
        UIColor.red.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 132), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 132), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 132)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 22, y: 10, width: 11, height: 11))
        color2.setFill()
        oval2Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 54, y: 3, width: 19, height: 19))
        color2.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 37, y: 14, width: 19, height: 19))
        color2.setFill()
        oval5Path.fill()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 68, y: 18, width: 19, height: 19))
        color2.setFill()
        oval6Path.fill()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 50, y: 32, width: 19, height: 19))
        color2.setFill()
        oval7Path.fill()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 71, y: 41, width: 19, height: 19))
        color2.setFill()
        oval8Path.fill()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 16, y: 33, width: 19, height: 19))
        color2.setFill()
        oval9Path.fill()


        //// Oval 10 Drawing
        let oval10Path = UIBezierPath(ovalIn: CGRect(x: 53, y: 54, width: 19, height: 19))
        color2.setFill()
        oval10Path.fill()


        //// Oval 11 Drawing
        let oval11Path = UIBezierPath(ovalIn: CGRect(x: 73, y: 66, width: 19, height: 19))
        color2.setFill()
        oval11Path.fill()


        //// Oval 12 Drawing
        let oval12Path = UIBezierPath(ovalIn: CGRect(x: 54, y: 78, width: 19, height: 19))
        color2.setFill()
        oval12Path.fill()


        //// Oval 13 Drawing
        let oval13Path = UIBezierPath(ovalIn: CGRect(x: 19, y: 76, width: 19, height: 19))
        color2.setFill()
        oval13Path.fill()


        //// Oval 14 Drawing
        let oval14Path = UIBezierPath(ovalIn: CGRect(x: 23, y: 55, width: 19, height: 19))
        color2.setFill()
        oval14Path.fill()


        //// Oval 15 Drawing
        let oval15Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 59, width: 19, height: 19))
        color2.setFill()
        oval15Path.fill()


        //// Oval 16 Drawing
        let oval16Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 45, width: 12, height: 12))
        color2.setFill()
        oval16Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 41, y: 0, width: 11, height: 11))
        color2.setFill()
        oval3Path.fill()


        //// Oval 17 Drawing
        let oval17Path = UIBezierPath(ovalIn: CGRect(x: 89, y: 57, width: 11, height: 11))
        color2.setFill()
        oval17Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 15, width: 19, height: 19))
        color2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 52, y: 96))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 63), controlPoint1: CGPoint(x: 51.88, y: 94.11), controlPoint2: CGPoint(x: 51.35, y: 77.11))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 44), controlPoint1: CGPoint(x: 49.04, y: 52.98), controlPoint2: CGPoint(x: 46.13, y: 44.33))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 29), controlPoint1: CGPoint(x: 44.94, y: 41.27), controlPoint2: CGPoint(x: 40.91, y: 33.07))
        bezierPath.addCurve(to: CGPoint(x: 18.5, y: 25.5), controlPoint1: CGPoint(x: 25.87, y: 24.22), controlPoint2: CGPoint(x: 15.01, y: 23.84))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 29), controlPoint1: CGPoint(x: 18.95, y: 25.71), controlPoint2: CGPoint(x: 22.67, y: 26.65))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 34), controlPoint1: CGPoint(x: 29.31, y: 30.25), controlPoint2: CGPoint(x: 32.06, y: 32.23))
        bezierPath.addCurve(to: CGPoint(x: 42, y: 47), controlPoint1: CGPoint(x: 39.74, y: 39.25), controlPoint2: CGPoint(x: 41.8, y: 46.53))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 63), controlPoint1: CGPoint(x: 42.18, y: 47.44), controlPoint2: CGPoint(x: 43.75, y: 55.26))
        bezierPath.addCurve(to: CGPoint(x: 43, y: 80), controlPoint1: CGPoint(x: 44.24, y: 70.68), controlPoint2: CGPoint(x: 43.17, y: 78.27))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 132), controlPoint1: CGPoint(x: 40.51, y: 106.16), controlPoint2: CGPoint(x: 31, y: 132))
        bezierPath.addLine(to: CGPoint(x: 54, y: 132))
        bezierPath.addCurve(to: CGPoint(x: 52, y: 96), controlPoint1: CGPoint(x: 54, y: 132), controlPoint2: CGPoint(x: 53.29, y: 115.61))
        bezierPath.close()
        color2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas5(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 107), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 107), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 107)


        //// Color Declarations
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 34, y: 71))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 38), controlPoint1: CGPoint(x: 33.88, y: 69.11), controlPoint2: CGPoint(x: 33.35, y: 52.11))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 19), controlPoint1: CGPoint(x: 31.04, y: 27.98), controlPoint2: CGPoint(x: 28.13, y: 19.33))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 26.94, y: 16.27), controlPoint2: CGPoint(x: 22.91, y: 8.07))
        bezierPath.addCurve(to: CGPoint(x: 0.5, y: 0.5), controlPoint1: CGPoint(x: 7.87, y: -0.78), controlPoint2: CGPoint(x: -2.99, y: -1.16))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 4), controlPoint1: CGPoint(x: 0.95, y: 0.71), controlPoint2: CGPoint(x: 4.67, y: 1.65))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 9), controlPoint1: CGPoint(x: 11.31, y: 5.25), controlPoint2: CGPoint(x: 14.06, y: 7.23))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 22), controlPoint1: CGPoint(x: 21.74, y: 14.25), controlPoint2: CGPoint(x: 23.8, y: 21.53))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 38), controlPoint1: CGPoint(x: 24.18, y: 22.44), controlPoint2: CGPoint(x: 25.75, y: 30.26))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 55), controlPoint1: CGPoint(x: 26.24, y: 45.68), controlPoint2: CGPoint(x: 25.17, y: 53.27))
        bezierPath.addCurve(to: CGPoint(x: 13, y: 107), controlPoint1: CGPoint(x: 22.51, y: 81.16), controlPoint2: CGPoint(x: 13, y: 107))
        bezierPath.addLine(to: CGPoint(x: 36, y: 107))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 71), controlPoint1: CGPoint(x: 36, y: 107), controlPoint2: CGPoint(x: 35.29, y: 90.61))
        bezierPath.close()
        color2.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
